/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.Location;
import com.rknowsys.eapp.hrm.model.LocationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author rknowsys
 * @see LocationImpl
 * @see com.rknowsys.eapp.hrm.model.Location
 * @see com.rknowsys.eapp.hrm.model.LocationModel
 * @generated
 */
public class LocationModelImpl extends BaseModelImpl<Location>
	implements LocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link com.rknowsys.eapp.hrm.model.Location} interface instead.
	 */
	public static final String TABLE_NAME = "location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "locationId", Types.BIGINT },
			{ "nationalityId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "postalcode", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "fax", Types.VARCHAR },
			{ "notes", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table location (locationId LONG not null primary key,nationalityId LONG,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,name VARCHAR(75) null,country VARCHAR(75) null,state_ VARCHAR(75) null,city VARCHAR(75) null,address VARCHAR(75) null,postalcode VARCHAR(75) null,phone VARCHAR(75) null,fax VARCHAR(75) null,notes VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table location";
	public static final String ORDER_BY_JPQL = " ORDER BY location.locationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY location.locationId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.Location"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.Location"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.Location"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long NATIONALITYID_COLUMN_BITMASK = 2L;
	public static long LOCATIONID_COLUMN_BITMASK = 4L;
	public static final String MAPPING_TABLE_HRM_LOCATIONS_HOLIDAYS_NAME = "hrm_locations_holidays";
	public static final Object[][] MAPPING_TABLE_HRM_LOCATIONS_HOLIDAYS_COLUMNS = {
			{ "holidayId", Types.BIGINT },
			{ "locationId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_HRM_LOCATIONS_HOLIDAYS_SQL_CREATE = "create table hrm_locations_holidays (holidayId LONG not null,locationId LONG not null,primary key (holidayId, locationId))";
	public static final boolean FINDER_CACHE_ENABLED_HRM_LOCATIONS_HOLIDAYS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hrm_locations_holidays"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.Location"));

	public LocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _locationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _locationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Location.class;
	}

	@Override
	public String getModelClassName() {
		return Location.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("locationId", getLocationId());
		attributes.put("nationalityId", getNationalityId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("name", getName());
		attributes.put("country", getCountry());
		attributes.put("state", getState());
		attributes.put("city", getCity());
		attributes.put("address", getAddress());
		attributes.put("postalcode", getPostalcode());
		attributes.put("phone", getPhone());
		attributes.put("fax", getFax());
		attributes.put("notes", getNotes());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		Long nationalityId = (Long)attributes.get("nationalityId");

		if (nationalityId != null) {
			setNationalityId(nationalityId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String postalcode = (String)attributes.get("postalcode");

		if (postalcode != null) {
			setPostalcode(postalcode);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String fax = (String)attributes.get("fax");

		if (fax != null) {
			setFax(fax);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}
	}

	@Override
	public long getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@Override
	public long getNationalityId() {
		return _nationalityId;
	}

	@Override
	public void setNationalityId(long nationalityId) {
		_columnBitmask |= NATIONALITYID_COLUMN_BITMASK;

		if (!_setOriginalNationalityId) {
			_setOriginalNationalityId = true;

			_originalNationalityId = _nationalityId;
		}

		_nationalityId = nationalityId;
	}

	public long getOriginalNationalityId() {
		return _originalNationalityId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getPostalcode() {
		if (_postalcode == null) {
			return StringPool.BLANK;
		}
		else {
			return _postalcode;
		}
	}

	@Override
	public void setPostalcode(String postalcode) {
		_postalcode = postalcode;
	}

	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@Override
	public String getFax() {
		if (_fax == null) {
			return StringPool.BLANK;
		}
		else {
			return _fax;
		}
	}

	@Override
	public void setFax(String fax) {
		_fax = fax;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Location.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Location toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Location)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocationImpl locationImpl = new LocationImpl();

		locationImpl.setLocationId(getLocationId());
		locationImpl.setNationalityId(getNationalityId());
		locationImpl.setCompanyId(getCompanyId());
		locationImpl.setGroupId(getGroupId());
		locationImpl.setCreateDate(getCreateDate());
		locationImpl.setModifiedDate(getModifiedDate());
		locationImpl.setUserId(getUserId());
		locationImpl.setName(getName());
		locationImpl.setCountry(getCountry());
		locationImpl.setState(getState());
		locationImpl.setCity(getCity());
		locationImpl.setAddress(getAddress());
		locationImpl.setPostalcode(getPostalcode());
		locationImpl.setPhone(getPhone());
		locationImpl.setFax(getFax());
		locationImpl.setNotes(getNotes());

		locationImpl.resetOriginalValues();

		return locationImpl;
	}

	@Override
	public int compareTo(Location location) {
		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Location)) {
			return false;
		}

		Location location = (Location)obj;

		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LocationModelImpl locationModelImpl = this;

		locationModelImpl._originalNationalityId = locationModelImpl._nationalityId;

		locationModelImpl._setOriginalNationalityId = false;

		locationModelImpl._originalGroupId = locationModelImpl._groupId;

		locationModelImpl._setOriginalGroupId = false;

		locationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Location> toCacheModel() {
		LocationCacheModel locationCacheModel = new LocationCacheModel();

		locationCacheModel.locationId = getLocationId();

		locationCacheModel.nationalityId = getNationalityId();

		locationCacheModel.companyId = getCompanyId();

		locationCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			locationCacheModel.createDate = createDate.getTime();
		}
		else {
			locationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			locationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			locationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		locationCacheModel.userId = getUserId();

		locationCacheModel.name = getName();

		String name = locationCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			locationCacheModel.name = null;
		}

		locationCacheModel.country = getCountry();

		String country = locationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			locationCacheModel.country = null;
		}

		locationCacheModel.state = getState();

		String state = locationCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			locationCacheModel.state = null;
		}

		locationCacheModel.city = getCity();

		String city = locationCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			locationCacheModel.city = null;
		}

		locationCacheModel.address = getAddress();

		String address = locationCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			locationCacheModel.address = null;
		}

		locationCacheModel.postalcode = getPostalcode();

		String postalcode = locationCacheModel.postalcode;

		if ((postalcode != null) && (postalcode.length() == 0)) {
			locationCacheModel.postalcode = null;
		}

		locationCacheModel.phone = getPhone();

		String phone = locationCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			locationCacheModel.phone = null;
		}

		locationCacheModel.fax = getFax();

		String fax = locationCacheModel.fax;

		if ((fax != null) && (fax.length() == 0)) {
			locationCacheModel.fax = null;
		}

		locationCacheModel.notes = getNotes();

		String notes = locationCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			locationCacheModel.notes = null;
		}

		return locationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{locationId=");
		sb.append(getLocationId());
		sb.append(", nationalityId=");
		sb.append(getNationalityId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", postalcode=");
		sb.append(getPostalcode());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", fax=");
		sb.append(getFax());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.Location");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationalityId</column-name><column-value><![CDATA[");
		sb.append(getNationalityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postalcode</column-name><column-value><![CDATA[");
		sb.append(getPostalcode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fax</column-name><column-value><![CDATA[");
		sb.append(getFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Location.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Location.class
		};
	private long _locationId;
	private long _nationalityId;
	private long _originalNationalityId;
	private boolean _setOriginalNationalityId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private String _name;
	private String _country;
	private String _state;
	private String _city;
	private String _address;
	private String _postalcode;
	private String _phone;
	private String _fax;
	private String _notes;
	private long _columnBitmask;
	private Location _escapedModel;
}