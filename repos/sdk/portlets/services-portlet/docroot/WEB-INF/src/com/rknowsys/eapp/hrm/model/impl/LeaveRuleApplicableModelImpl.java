/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.LeaveRuleApplicable;
import com.rknowsys.eapp.hrm.model.LeaveRuleApplicableModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LeaveRuleApplicable service. Represents a row in the &quot;leave_rule_applicable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.LeaveRuleApplicableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveRuleApplicableImpl}.
 * </p>
 *
 * @author rknowsys
 * @see LeaveRuleApplicableImpl
 * @see com.rknowsys.eapp.hrm.model.LeaveRuleApplicable
 * @see com.rknowsys.eapp.hrm.model.LeaveRuleApplicableModel
 * @generated
 */
public class LeaveRuleApplicableModelImpl extends BaseModelImpl<LeaveRuleApplicable>
	implements LeaveRuleApplicableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave rule applicable model instance should use the {@link com.rknowsys.eapp.hrm.model.LeaveRuleApplicable} interface instead.
	 */
	public static final String TABLE_NAME = "leave_rule_applicable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveRuleApplicableId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "leaveTypeId", Types.BIGINT },
			{ "forFemale", Types.BOOLEAN },
			{ "forMale", Types.BOOLEAN },
			{ "forYearsOfService", Types.BOOLEAN },
			{ "fromYears", Types.VARCHAR },
			{ "toYears", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table leave_rule_applicable (leaveRuleApplicableId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,leaveTypeId LONG,forFemale BOOLEAN,forMale BOOLEAN,forYearsOfService BOOLEAN,fromYears VARCHAR(75) null,toYears VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table leave_rule_applicable";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveRuleApplicable.leaveRuleApplicableId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leave_rule_applicable.leaveRuleApplicableId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.LeaveRuleApplicable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.LeaveRuleApplicable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.LeaveRuleApplicable"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long LEAVETYPEID_COLUMN_BITMASK = 2L;
	public static long LEAVERULEAPPLICABLEID_COLUMN_BITMASK = 4L;
	public static final String MAPPING_TABLE_HRM_LRA_JOBCATEGORIES_NAME = "hrm_lra_jobCategories";
	public static final Object[][] MAPPING_TABLE_HRM_LRA_JOBCATEGORIES_COLUMNS = {
			{ "jobCategoryId", Types.BIGINT },
			{ "leaveRuleApplicableId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_HRM_LRA_JOBCATEGORIES_SQL_CREATE = "create table hrm_lra_jobCategories (jobCategoryId LONG not null,leaveRuleApplicableId LONG not null,primary key (jobCategoryId, leaveRuleApplicableId))";
	public static final boolean FINDER_CACHE_ENABLED_HRM_LRA_JOBCATEGORIES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hrm_lra_jobCategories"), true);
	public static final String MAPPING_TABLE_HRM_LRA_JOBTITLES_NAME = "hrm_lra_jobTitles";
	public static final Object[][] MAPPING_TABLE_HRM_LRA_JOBTITLES_COLUMNS = {
			{ "jobTitleId", Types.BIGINT },
			{ "leaveRuleApplicableId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_HRM_LRA_JOBTITLES_SQL_CREATE = "create table hrm_lra_jobTitles (jobTitleId LONG not null,leaveRuleApplicableId LONG not null,primary key (jobTitleId, leaveRuleApplicableId))";
	public static final boolean FINDER_CACHE_ENABLED_HRM_LRA_JOBTITLES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hrm_lra_jobTitles"), true);
	public static final String MAPPING_TABLE_HRM_LRA_EMPLOYMENTSTATUS_NAME = "hrm_lra_employmentStatus";
	public static final Object[][] MAPPING_TABLE_HRM_LRA_EMPLOYMENTSTATUS_COLUMNS =
		{
			{ "employmentStatusId", Types.BIGINT },
			{ "leaveRuleApplicableId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_HRM_LRA_EMPLOYMENTSTATUS_SQL_CREATE =
		"create table hrm_lra_employmentStatus (employmentStatusId LONG not null,leaveRuleApplicableId LONG not null,primary key (employmentStatusId, leaveRuleApplicableId))";
	public static final boolean FINDER_CACHE_ENABLED_HRM_LRA_EMPLOYMENTSTATUS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hrm_lra_employmentStatus"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.LeaveRuleApplicable"));

	public LeaveRuleApplicableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveRuleApplicableId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveRuleApplicableId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveRuleApplicableId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveRuleApplicable.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveRuleApplicable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveRuleApplicableId", getLeaveRuleApplicableId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("forFemale", getForFemale());
		attributes.put("forMale", getForMale());
		attributes.put("forYearsOfService", getForYearsOfService());
		attributes.put("fromYears", getFromYears());
		attributes.put("toYears", getToYears());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveRuleApplicableId = (Long)attributes.get(
				"leaveRuleApplicableId");

		if (leaveRuleApplicableId != null) {
			setLeaveRuleApplicableId(leaveRuleApplicableId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		Boolean forFemale = (Boolean)attributes.get("forFemale");

		if (forFemale != null) {
			setForFemale(forFemale);
		}

		Boolean forMale = (Boolean)attributes.get("forMale");

		if (forMale != null) {
			setForMale(forMale);
		}

		Boolean forYearsOfService = (Boolean)attributes.get("forYearsOfService");

		if (forYearsOfService != null) {
			setForYearsOfService(forYearsOfService);
		}

		String fromYears = (String)attributes.get("fromYears");

		if (fromYears != null) {
			setFromYears(fromYears);
		}

		String toYears = (String)attributes.get("toYears");

		if (toYears != null) {
			setToYears(toYears);
		}
	}

	@Override
	public long getLeaveRuleApplicableId() {
		return _leaveRuleApplicableId;
	}

	@Override
	public void setLeaveRuleApplicableId(long leaveRuleApplicableId) {
		_leaveRuleApplicableId = leaveRuleApplicableId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_columnBitmask |= LEAVETYPEID_COLUMN_BITMASK;

		if (!_setOriginalLeaveTypeId) {
			_setOriginalLeaveTypeId = true;

			_originalLeaveTypeId = _leaveTypeId;
		}

		_leaveTypeId = leaveTypeId;
	}

	public long getOriginalLeaveTypeId() {
		return _originalLeaveTypeId;
	}

	@Override
	public boolean getForFemale() {
		return _forFemale;
	}

	@Override
	public boolean isForFemale() {
		return _forFemale;
	}

	@Override
	public void setForFemale(boolean forFemale) {
		_forFemale = forFemale;
	}

	@Override
	public boolean getForMale() {
		return _forMale;
	}

	@Override
	public boolean isForMale() {
		return _forMale;
	}

	@Override
	public void setForMale(boolean forMale) {
		_forMale = forMale;
	}

	@Override
	public boolean getForYearsOfService() {
		return _forYearsOfService;
	}

	@Override
	public boolean isForYearsOfService() {
		return _forYearsOfService;
	}

	@Override
	public void setForYearsOfService(boolean forYearsOfService) {
		_forYearsOfService = forYearsOfService;
	}

	@Override
	public String getFromYears() {
		if (_fromYears == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromYears;
		}
	}

	@Override
	public void setFromYears(String fromYears) {
		_fromYears = fromYears;
	}

	@Override
	public String getToYears() {
		if (_toYears == null) {
			return StringPool.BLANK;
		}
		else {
			return _toYears;
		}
	}

	@Override
	public void setToYears(String toYears) {
		_toYears = toYears;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LeaveRuleApplicable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveRuleApplicable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveRuleApplicable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveRuleApplicableImpl leaveRuleApplicableImpl = new LeaveRuleApplicableImpl();

		leaveRuleApplicableImpl.setLeaveRuleApplicableId(getLeaveRuleApplicableId());
		leaveRuleApplicableImpl.setCompanyId(getCompanyId());
		leaveRuleApplicableImpl.setGroupId(getGroupId());
		leaveRuleApplicableImpl.setCreateDate(getCreateDate());
		leaveRuleApplicableImpl.setModifiedDate(getModifiedDate());
		leaveRuleApplicableImpl.setUserId(getUserId());
		leaveRuleApplicableImpl.setLeaveTypeId(getLeaveTypeId());
		leaveRuleApplicableImpl.setForFemale(getForFemale());
		leaveRuleApplicableImpl.setForMale(getForMale());
		leaveRuleApplicableImpl.setForYearsOfService(getForYearsOfService());
		leaveRuleApplicableImpl.setFromYears(getFromYears());
		leaveRuleApplicableImpl.setToYears(getToYears());

		leaveRuleApplicableImpl.resetOriginalValues();

		return leaveRuleApplicableImpl;
	}

	@Override
	public int compareTo(LeaveRuleApplicable leaveRuleApplicable) {
		long primaryKey = leaveRuleApplicable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveRuleApplicable)) {
			return false;
		}

		LeaveRuleApplicable leaveRuleApplicable = (LeaveRuleApplicable)obj;

		long primaryKey = leaveRuleApplicable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LeaveRuleApplicableModelImpl leaveRuleApplicableModelImpl = this;

		leaveRuleApplicableModelImpl._originalGroupId = leaveRuleApplicableModelImpl._groupId;

		leaveRuleApplicableModelImpl._setOriginalGroupId = false;

		leaveRuleApplicableModelImpl._originalLeaveTypeId = leaveRuleApplicableModelImpl._leaveTypeId;

		leaveRuleApplicableModelImpl._setOriginalLeaveTypeId = false;

		leaveRuleApplicableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveRuleApplicable> toCacheModel() {
		LeaveRuleApplicableCacheModel leaveRuleApplicableCacheModel = new LeaveRuleApplicableCacheModel();

		leaveRuleApplicableCacheModel.leaveRuleApplicableId = getLeaveRuleApplicableId();

		leaveRuleApplicableCacheModel.companyId = getCompanyId();

		leaveRuleApplicableCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveRuleApplicableCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveRuleApplicableCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveRuleApplicableCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveRuleApplicableCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveRuleApplicableCacheModel.userId = getUserId();

		leaveRuleApplicableCacheModel.leaveTypeId = getLeaveTypeId();

		leaveRuleApplicableCacheModel.forFemale = getForFemale();

		leaveRuleApplicableCacheModel.forMale = getForMale();

		leaveRuleApplicableCacheModel.forYearsOfService = getForYearsOfService();

		leaveRuleApplicableCacheModel.fromYears = getFromYears();

		String fromYears = leaveRuleApplicableCacheModel.fromYears;

		if ((fromYears != null) && (fromYears.length() == 0)) {
			leaveRuleApplicableCacheModel.fromYears = null;
		}

		leaveRuleApplicableCacheModel.toYears = getToYears();

		String toYears = leaveRuleApplicableCacheModel.toYears;

		if ((toYears != null) && (toYears.length() == 0)) {
			leaveRuleApplicableCacheModel.toYears = null;
		}

		return leaveRuleApplicableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{leaveRuleApplicableId=");
		sb.append(getLeaveRuleApplicableId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", forFemale=");
		sb.append(getForFemale());
		sb.append(", forMale=");
		sb.append(getForMale());
		sb.append(", forYearsOfService=");
		sb.append(getForYearsOfService());
		sb.append(", fromYears=");
		sb.append(getFromYears());
		sb.append(", toYears=");
		sb.append(getToYears());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.LeaveRuleApplicable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveRuleApplicableId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRuleApplicableId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forFemale</column-name><column-value><![CDATA[");
		sb.append(getForFemale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forMale</column-name><column-value><![CDATA[");
		sb.append(getForMale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>forYearsOfService</column-name><column-value><![CDATA[");
		sb.append(getForYearsOfService());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromYears</column-name><column-value><![CDATA[");
		sb.append(getFromYears());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toYears</column-name><column-value><![CDATA[");
		sb.append(getToYears());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LeaveRuleApplicable.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveRuleApplicable.class
		};
	private long _leaveRuleApplicableId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private long _leaveTypeId;
	private long _originalLeaveTypeId;
	private boolean _setOriginalLeaveTypeId;
	private boolean _forFemale;
	private boolean _forMale;
	private boolean _forYearsOfService;
	private String _fromYears;
	private String _toYears;
	private long _columnBitmask;
	private LeaveRuleApplicable _escapedModel;
}