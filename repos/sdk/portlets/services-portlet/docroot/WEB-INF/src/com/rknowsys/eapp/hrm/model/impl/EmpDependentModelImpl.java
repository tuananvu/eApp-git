/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.EmpDependent;
import com.rknowsys.eapp.hrm.model.EmpDependentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EmpDependent service. Represents a row in the &quot;hrm_empdependent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.EmpDependentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpDependentImpl}.
 * </p>
 *
 * @author rknowsys
 * @see EmpDependentImpl
 * @see com.rknowsys.eapp.hrm.model.EmpDependent
 * @see com.rknowsys.eapp.hrm.model.EmpDependentModel
 * @generated
 */
public class EmpDependentModelImpl extends BaseModelImpl<EmpDependent>
	implements EmpDependentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emp dependent model instance should use the {@link com.rknowsys.eapp.hrm.model.EmpDependent} interface instead.
	 */
	public static final String TABLE_NAME = "hrm_empdependent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empDependentId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "relationship", Types.VARCHAR },
			{ "dateOfBirth", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table hrm_empdependent (empDependentId LONG not null primary key,employeeId LONG,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,relationship VARCHAR(75) null,dateOfBirth DATE null)";
	public static final String TABLE_SQL_DROP = "drop table hrm_empdependent";
	public static final String ORDER_BY_JPQL = " ORDER BY empDependent.empDependentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY hrm_empdependent.empDependentId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.EmpDependent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.EmpDependent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.EmpDependent"),
			true);
	public static long EMPDEPENDENTID_COLUMN_BITMASK = 1L;
	public static long EMPLOYEEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.EmpDependent"));

	public EmpDependentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empDependentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpDependentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empDependentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmpDependent.class;
	}

	@Override
	public String getModelClassName() {
		return EmpDependent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empDependentId", getEmpDependentId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("relationship", getRelationship());
		attributes.put("dateOfBirth", getDateOfBirth());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empDependentId = (Long)attributes.get("empDependentId");

		if (empDependentId != null) {
			setEmpDependentId(empDependentId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String relationship = (String)attributes.get("relationship");

		if (relationship != null) {
			setRelationship(relationship);
		}

		Date dateOfBirth = (Date)attributes.get("dateOfBirth");

		if (dateOfBirth != null) {
			setDateOfBirth(dateOfBirth);
		}
	}

	@Override
	public long getEmpDependentId() {
		return _empDependentId;
	}

	@Override
	public void setEmpDependentId(long empDependentId) {
		_columnBitmask |= EMPDEPENDENTID_COLUMN_BITMASK;

		if (!_setOriginalEmpDependentId) {
			_setOriginalEmpDependentId = true;

			_originalEmpDependentId = _empDependentId;
		}

		_empDependentId = empDependentId;
	}

	public long getOriginalEmpDependentId() {
		return _originalEmpDependentId;
	}

	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getRelationship() {
		if (_relationship == null) {
			return StringPool.BLANK;
		}
		else {
			return _relationship;
		}
	}

	@Override
	public void setRelationship(String relationship) {
		_relationship = relationship;
	}

	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmpDependent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmpDependent toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmpDependent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmpDependentImpl empDependentImpl = new EmpDependentImpl();

		empDependentImpl.setEmpDependentId(getEmpDependentId());
		empDependentImpl.setEmployeeId(getEmployeeId());
		empDependentImpl.setGroupId(getGroupId());
		empDependentImpl.setCompanyId(getCompanyId());
		empDependentImpl.setUserId(getUserId());
		empDependentImpl.setCreateDate(getCreateDate());
		empDependentImpl.setModifiedDate(getModifiedDate());
		empDependentImpl.setName(getName());
		empDependentImpl.setRelationship(getRelationship());
		empDependentImpl.setDateOfBirth(getDateOfBirth());

		empDependentImpl.resetOriginalValues();

		return empDependentImpl;
	}

	@Override
	public int compareTo(EmpDependent empDependent) {
		long primaryKey = empDependent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmpDependent)) {
			return false;
		}

		EmpDependent empDependent = (EmpDependent)obj;

		long primaryKey = empDependent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmpDependentModelImpl empDependentModelImpl = this;

		empDependentModelImpl._originalEmpDependentId = empDependentModelImpl._empDependentId;

		empDependentModelImpl._setOriginalEmpDependentId = false;

		empDependentModelImpl._originalEmployeeId = empDependentModelImpl._employeeId;

		empDependentModelImpl._setOriginalEmployeeId = false;

		empDependentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmpDependent> toCacheModel() {
		EmpDependentCacheModel empDependentCacheModel = new EmpDependentCacheModel();

		empDependentCacheModel.empDependentId = getEmpDependentId();

		empDependentCacheModel.employeeId = getEmployeeId();

		empDependentCacheModel.groupId = getGroupId();

		empDependentCacheModel.companyId = getCompanyId();

		empDependentCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			empDependentCacheModel.createDate = createDate.getTime();
		}
		else {
			empDependentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			empDependentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			empDependentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		empDependentCacheModel.name = getName();

		String name = empDependentCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			empDependentCacheModel.name = null;
		}

		empDependentCacheModel.relationship = getRelationship();

		String relationship = empDependentCacheModel.relationship;

		if ((relationship != null) && (relationship.length() == 0)) {
			empDependentCacheModel.relationship = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			empDependentCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			empDependentCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		return empDependentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{empDependentId=");
		sb.append(getEmpDependentId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", relationship=");
		sb.append(getRelationship());
		sb.append(", dateOfBirth=");
		sb.append(getDateOfBirth());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.EmpDependent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empDependentId</column-name><column-value><![CDATA[");
		sb.append(getEmpDependentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relationship</column-name><column-value><![CDATA[");
		sb.append(getRelationship());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
		sb.append(getDateOfBirth());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmpDependent.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmpDependent.class
		};
	private long _empDependentId;
	private long _originalEmpDependentId;
	private boolean _setOriginalEmpDependentId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _relationship;
	private Date _dateOfBirth;
	private long _columnBitmask;
	private EmpDependent _escapedModel;
}